Inicializar o React em modo "Fast Refresh" (inventei):
    yarn start

HTML dentro do JS: JSX
HTML dentro do TS: TSX

Componentes: pequenos pedaços de código que, juntos, formam a minha aplicação:
    - Sidebar
    - Menus
    - Cabeçalhos
    - etc.

Componentes React são funções.

Em React, TUDO é componente.

Propriedade (conhecido como atributo no HTML):
    são informações que a gente pode passar para um componente se comportar de maneira diferente.
    por exemplo <a> pode receber o atributo href

Componente React:
    Num documento tsx eu declaro o comportamento de cada componente e a tipagem de seus atributos.

Existe um atributo disponível para todo componente React chamado children. Todo conteúdo dentro de uma tag React é diretamente atribuído ao children.

Ex.:
    type componenteReactProps = {
        children: String;
    }

    export function componenteReact(props: componenteReactProps){
        return(
            <h1>props.children</h1>
        )
    }

    Quando a função componenteReact for chamada, posso colocar uma string dentro dela.

    Ex.:
        <componenteReact>Header</componenteReact>

Caso eu utilizasse outros atributos que não o children:

Ex.:
    type componenteReactProps = {
        header: String;
    }

    export function componenteReact(props: componenteReactProps){
        return(
            <h1>props.header</h1>
        )
    }

    A forma de chamar a função seria a seguinte:

        <componenteReact header="Header"/>

Um conceito importante do React é o da imutabilidade. Nós não alteramos o valor de uma variável de estado, mas criamos sempre um novo estado através das funções de set.

Ex.:
    const [variavel, setVariavel] = useState(valorInicial)

    function mudaVariavel(){
        setVariavel(mudancaAFazer);
    }

Para trabalhar o roteamento das páginas utilizamos uma biblioteca React de roteamento:
    yarn add react-router-dom

    Essa biblioteca costuma dar erro quando trabalhando com typescript. Para corrigir:
    yarn add @types/react-router-dom

Contexto:
    A forma que o React utiliza para compartilhar informações entre todos os componentes da aplicação.
    O contexto permite que compartilhemos valores entre os componentes e também funções capazes de modificar esses valores. O valor modificado reflete em todos os contextos.

Componente vs Hook:
    O componente é um item visual que se repete por diversas vezes no HTML (um botão, por exemplo) enquanto o Hook é uma funcionalidade frequente, não visual, mas presente em diversas páginas do app.